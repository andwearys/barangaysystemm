/*
 * GREETINGS! WE ARE GROUP II FROM COMPUTER PROGRAMMING III
 * BARANGAY SYSTEM
 * WE ARE:
 * GARRATA (CODER)
 * SERATO  (CODER)
 * NUNEZ   (CODER)
 * ANDAYA  (CODER, DESIGNER)
 */
package barangaysystem;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Admin
 */
public final class UpdateResident extends javax.swing.JFrame {
        Connection conn=null;
        PreparedStatement pst=null;
        ResultSet rs=null;
        String wImage = "";
        String s;
    /**
     * Creates new form Main
     */
    public UpdateResident() {
        initComponents();
        lblSelectedRowResidentID.setVisible(false);
        lblID.setVisible(false);
        lblFname.setVisible(false);
        lblLname.setVisible(false);
        lblDobCheck.setVisible(false);
        lblUsername.setVisible(false);
        lblUserID.setVisible(false);
        lblUserType.setVisible(false);
        //Group 2 Prog 3 Tweaks
        showDate();
        showTime();
    }

    void showDate() {
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("MM/dd/yyyy");
        lblDate.setText("Date: " + s.format(d));
    }

    void showTime() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
        lblTime.setText("Time: " + s.format(d));
            }
            
        }
        ).start();
    }
    
    void report(){
        Connection con=null;
        con=SqlConnectReports.ConnectDB();
        String report = "INSERT INTO `audittrail`(`Date`, `Time`, `User Name`, `Action Performed`, `Resident ID`, `AuditTrailType`) VALUES (?,?,?,?,?,?)";
            Date d = new Date();        
            SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat c = new SimpleDateFormat("hh:mm:ss");
            String date = (s.format(d));
            String time = (c.format(d));
    try{
            pst=con.prepareStatement(report);
            pst.setString(1, date);
            pst.setString(2, time);
            pst.setString(3, lblLoginAs.getText());
            pst.setString(4, "UPDATE");
            pst.setString(5, lblSelectedRowResidentID.getText());
            pst.setString(6, "Resident");
            pst.executeUpdate();
    }catch(Exception e){
    JOptionPane.showMessageDialog(null, e);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmdUpdate = new javax.swing.JButton();
        panelPersonalInfo = new javax.swing.JPanel();
        cboGender = new javax.swing.JComboBox<>();
        lblDOBpattern = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtRlname = new javax.swing.JTextField();
        txtRmname = new javax.swing.JTextField();
        txtRfname = new javax.swing.JTextField();
        lblPOB = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblRlname = new javax.swing.JLabel();
        lblRmname = new javax.swing.JLabel();
        txtPOB = new javax.swing.JTextField();
        lblRfname = new javax.swing.JLabel();
        panelAddress = new javax.swing.JPanel();
        lblAddressBlock = new javax.swing.JLabel();
        txtAddressBlock = new javax.swing.JTextField();
        txtAddressLot = new javax.swing.JTextField();
        lblAddressLot = new javax.swing.JLabel();
        lblRequired6 = new javax.swing.JLabel();
        lblRequired7 = new javax.swing.JLabel();
        lblRequired = new javax.swing.JLabel();
        lblRequired1 = new javax.swing.JLabel();
        lblRequired2 = new javax.swing.JLabel();
        lblRequired4 = new javax.swing.JLabel();
        lblRequired5 = new javax.swing.JLabel();
        chkRegisteredVoter = new javax.swing.JCheckBox();
        txtDOB = new com.toedter.calendar.JDateChooser();
        lblRequired3 = new javax.swing.JLabel();
        panelfamilyBackround = new javax.swing.JPanel();
        panelFather = new javax.swing.JPanel();
        lblFatherName = new javax.swing.JLabel();
        txtFatherFname = new javax.swing.JTextField();
        txtFatherLname = new javax.swing.JTextField();
        lblFatherOccupation = new javax.swing.JLabel();
        txtFatherOccupation = new javax.swing.JTextField();
        panelMother = new javax.swing.JPanel();
        lblMotherName = new javax.swing.JLabel();
        lblMotherOccupation = new javax.swing.JLabel();
        txtMotherOccupation = new javax.swing.JTextField();
        txtMotherFname = new javax.swing.JTextField();
        txtMotherLname = new javax.swing.JTextField();
        lblGuardian = new javax.swing.JLabel();
        txtGuardianFname = new javax.swing.JTextField();
        txtGuardianLname = new javax.swing.JTextField();
        lblGuardianRelationShip = new javax.swing.JLabel();
        txtGuardianRelationship = new javax.swing.JTextField();
        txtGuardianOccupation = new javax.swing.JTextField();
        lblGuardianOccupation = new javax.swing.JLabel();
        lblSpouse = new javax.swing.JLabel();
        txtSpouseFname = new javax.swing.JTextField();
        txtSpouseLname = new javax.swing.JTextField();
        txtSpouseOccupation = new javax.swing.JTextField();
        lblSpouseOccupation = new javax.swing.JLabel();
        lblBirthRank = new javax.swing.JLabel();
        lblNoOfSiblings = new javax.swing.JLabel();
        txtNoOfSiblings = new javax.swing.JTextField();
        cboBirthRank = new javax.swing.JComboBox<>();
        lblRequired8 = new javax.swing.JLabel();
        lblRequired9 = new javax.swing.JLabel();
        lblBack = new javax.swing.JLabel();
        lblBackHover = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        cmdSelectImage = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        lblIndicatesRequiredField = new javax.swing.JLabel();
        lblUserType = new javax.swing.JLabel();
        lblUserID = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblDefaultImage = new javax.swing.JLabel();
        lblFname = new javax.swing.JLabel();
        lblLname = new javax.swing.JLabel();
        lblDobCheck = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblSelectedRowResidentID = new javax.swing.JLabel();
        lblDisplayResidentID = new javax.swing.JLabel();
        lblLoginAs1 = new javax.swing.JLabel();
        lblLoginAs = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Barangay Records System: Update Residents");
        setMaximumSize(new java.awt.Dimension(860, 500));
        setResizable(false);

        jPanel1.setLayout(null);

        cmdUpdate.setBackground(new java.awt.Color(0, 102, 255));
        cmdUpdate.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        cmdUpdate.setText("UPDATE");
        cmdUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(cmdUpdate);
        cmdUpdate.setBounds(770, 600, 210, 40);

        panelPersonalInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelPersonalInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 16))); // NOI18N
        panelPersonalInfo.setLayout(null);

        cboGender.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));
        panelPersonalInfo.add(cboGender);
        cboGender.setBounds(116, 213, 90, 30);

        lblDOBpattern.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDOBpattern.setForeground(new java.awt.Color(102, 102, 102));
        lblDOBpattern.setText("(YYYY-MM-DD)");
        panelPersonalInfo.add(lblDOBpattern);
        lblDOBpattern.setBounds(116, 163, 90, 14);

        lblGender.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGender.setText("Gender:");
        panelPersonalInfo.add(lblGender);
        lblGender.setBounds(16, 213, 100, 30);

        txtRlname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelPersonalInfo.add(txtRlname);
        txtRlname.setBounds(116, 93, 170, 30);

        txtRmname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelPersonalInfo.add(txtRmname);
        txtRmname.setBounds(116, 63, 170, 30);

        txtRfname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelPersonalInfo.add(txtRfname);
        txtRfname.setBounds(116, 33, 170, 30);

        lblPOB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPOB.setText("Place of Birth:");
        panelPersonalInfo.add(lblPOB);
        lblPOB.setBounds(16, 183, 100, 30);

        lblDOB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDOB.setText("Date of Birth:");
        panelPersonalInfo.add(lblDOB);
        lblDOB.setBounds(16, 133, 90, 30);

        lblRlname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRlname.setText("Last Name:");
        panelPersonalInfo.add(lblRlname);
        lblRlname.setBounds(16, 93, 90, 30);

        lblRmname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRmname.setText("Middle Name:");
        panelPersonalInfo.add(lblRmname);
        lblRmname.setBounds(16, 63, 90, 30);

        txtPOB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelPersonalInfo.add(txtPOB);
        txtPOB.setBounds(116, 183, 170, 30);

        lblRfname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblRfname.setText("First Name:");
        panelPersonalInfo.add(lblRfname);
        lblRfname.setBounds(16, 33, 90, 30);

        panelAddress.setBackground(new java.awt.Color(255, 255, 255));
        panelAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14))); // NOI18N

        lblAddressBlock.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAddressBlock.setText("House #:");

        txtAddressBlock.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtAddressLot.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblAddressLot.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblAddressLot.setText("Street:");

        lblRequired6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired6.setText("*");

        lblRequired7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired7.setText("*");

        javax.swing.GroupLayout panelAddressLayout = new javax.swing.GroupLayout(panelAddress);
        panelAddress.setLayout(panelAddressLayout);
        panelAddressLayout.setHorizontalGroup(
            panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddressLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAddressLayout.createSequentialGroup()
                        .addComponent(lblAddressLot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddressLot, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRequired7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddressLayout.createSequentialGroup()
                        .addComponent(lblAddressBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddressBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRequired6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        panelAddressLayout.setVerticalGroup(
            panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddressLayout.createSequentialGroup()
                .addGroup(panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAddressBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAddressBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblRequired6))
                .addGroup(panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAddressLot, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblAddressLot, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblRequired7))
                .addGap(0, 1, Short.MAX_VALUE))
        );

        panelPersonalInfo.add(panelAddress);
        panelAddress.setBounds(6, 313, 280, 87);

        lblRequired.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired.setText("*");
        panelPersonalInfo.add(lblRequired);
        lblRequired.setBounds(290, 33, 20, 17);

        lblRequired1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired1.setText("*");
        panelPersonalInfo.add(lblRequired1);
        lblRequired1.setBounds(290, 63, 20, 17);

        lblRequired2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired2.setText("*");
        panelPersonalInfo.add(lblRequired2);
        lblRequired2.setBounds(290, 93, 20, 17);

        lblRequired4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired4.setText("*");
        panelPersonalInfo.add(lblRequired4);
        lblRequired4.setBounds(290, 183, 20, 17);

        lblRequired5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired5.setText("*");
        panelPersonalInfo.add(lblRequired5);
        lblRequired5.setBounds(210, 219, 20, 17);

        chkRegisteredVoter.setBackground(new java.awt.Color(255, 255, 255));
        chkRegisteredVoter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        chkRegisteredVoter.setText("Registered Voter");
        panelPersonalInfo.add(chkRegisteredVoter);
        chkRegisteredVoter.setBounds(116, 272, 140, 19);

        txtDOB.setDateFormatString("yyyy-MM-dd");
        panelPersonalInfo.add(txtDOB);
        txtDOB.setBounds(120, 130, 150, 30);

        lblRequired3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired3.setText("*");
        panelPersonalInfo.add(lblRequired3);
        lblRequired3.setBounds(280, 130, 10, 17);

        jPanel1.add(panelPersonalInfo);
        panelPersonalInfo.setBounds(20, 100, 320, 420);

        panelfamilyBackround.setBackground(new java.awt.Color(255, 255, 255));
        panelfamilyBackround.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Family Backround", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 16))); // NOI18N
        panelfamilyBackround.setLayout(null);

        panelFather.setBackground(new java.awt.Color(255, 255, 255));
        panelFather.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Father", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14))); // NOI18N

        lblFatherName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFatherName.setText("Name:");

        txtFatherFname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtFatherLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        lblFatherOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFatherOccupation.setText("Occupation:");

        txtFatherOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout panelFatherLayout = new javax.swing.GroupLayout(panelFather);
        panelFather.setLayout(panelFatherLayout);
        panelFatherLayout.setHorizontalGroup(
            panelFatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFatherLayout.createSequentialGroup()
                .addGroup(panelFatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFatherLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(lblFatherName)
                        .addGap(13, 13, 13)
                        .addComponent(txtFatherFname, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtFatherLname, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelFatherLayout.createSequentialGroup()
                        .addComponent(lblFatherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(txtFatherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        panelFatherLayout.setVerticalGroup(
            panelFatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFatherLayout.createSequentialGroup()
                .addGroup(panelFatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFatherLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblFatherName))
                    .addComponent(txtFatherFname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFatherLname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelFatherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFatherLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblFatherOccupation))
                    .addComponent(txtFatherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        panelfamilyBackround.add(panelFather);
        panelFather.setBounds(16, 33, 358, 91);

        panelMother.setBackground(new java.awt.Color(255, 255, 255));
        panelMother.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mother", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14))); // NOI18N

        lblMotherName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMotherName.setText("Name:");

        lblMotherOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblMotherOccupation.setText("Occupation:");

        txtMotherOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtMotherFname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtMotherLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout panelMotherLayout = new javax.swing.GroupLayout(panelMother);
        panelMother.setLayout(panelMotherLayout);
        panelMotherLayout.setHorizontalGroup(
            panelMotherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMotherLayout.createSequentialGroup()
                .addGroup(panelMotherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMotherLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(lblMotherName)
                        .addGap(13, 13, 13)
                        .addComponent(txtMotherFname, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtMotherLname, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMotherLayout.createSequentialGroup()
                        .addComponent(lblMotherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(txtMotherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        panelMotherLayout.setVerticalGroup(
            panelMotherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMotherLayout.createSequentialGroup()
                .addGroup(panelMotherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMotherLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblMotherName))
                    .addComponent(txtMotherFname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMotherLname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelMotherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMotherLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblMotherOccupation))
                    .addComponent(txtMotherOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        panelfamilyBackround.add(panelMother);
        panelMother.setBounds(16, 137, 358, 93);

        lblGuardian.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGuardian.setText("Guardian:");
        panelfamilyBackround.add(lblGuardian);
        lblGuardian.setBounds(36, 248, 80, 14);

        txtGuardianFname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtGuardianFname);
        txtGuardianFname.setBounds(110, 240, 120, 30);

        txtGuardianLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtGuardianLname);
        txtGuardianLname.setBounds(230, 240, 120, 30);

        lblGuardianRelationShip.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGuardianRelationShip.setText("Relationship:");
        panelfamilyBackround.add(lblGuardianRelationShip);
        lblGuardianRelationShip.setBounds(16, 278, 100, 17);

        txtGuardianRelationship.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtGuardianRelationship);
        txtGuardianRelationship.setBounds(110, 270, 240, 30);

        txtGuardianOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtGuardianOccupation);
        txtGuardianOccupation.setBounds(110, 300, 240, 30);

        lblGuardianOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblGuardianOccupation.setText("Occupation:");
        panelfamilyBackround.add(lblGuardianOccupation);
        lblGuardianOccupation.setBounds(26, 308, 90, 17);

        lblSpouse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSpouse.setText("Spouse:");
        panelfamilyBackround.add(lblSpouse);
        lblSpouse.setBounds(46, 348, 60, 14);

        txtSpouseFname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtSpouseFname);
        txtSpouseFname.setBounds(110, 340, 120, 30);

        txtSpouseLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtSpouseLname);
        txtSpouseLname.setBounds(230, 340, 120, 30);

        txtSpouseOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtSpouseOccupation);
        txtSpouseOccupation.setBounds(110, 370, 240, 30);

        lblSpouseOccupation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSpouseOccupation.setText("Occupation:");
        panelfamilyBackround.add(lblSpouseOccupation);
        lblSpouseOccupation.setBounds(26, 378, 90, 17);

        lblBirthRank.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBirthRank.setText(" Birth Rank:");
        panelfamilyBackround.add(lblBirthRank);
        lblBirthRank.setBounds(26, 439, 90, 30);

        lblNoOfSiblings.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNoOfSiblings.setText("No. of Siblings:");
        panelfamilyBackround.add(lblNoOfSiblings);
        lblNoOfSiblings.setBounds(8, 419, 100, 15);

        txtNoOfSiblings.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        panelfamilyBackround.add(txtNoOfSiblings);
        txtNoOfSiblings.setBounds(110, 410, 100, 30);

        cboBirthRank.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboBirthRank.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Firstborn", "Middleborn", "Lastborn", "Twin" }));
        cboBirthRank.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboBirthRankItemStateChanged(evt);
            }
        });
        panelfamilyBackround.add(cboBirthRank);
        cboBirthRank.setBounds(110, 440, 110, 30);

        lblRequired8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired8.setText("*");
        panelfamilyBackround.add(lblRequired8);
        lblRequired8.setBounds(220, 410, 20, 17);

        lblRequired9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRequired9.setText("*");
        panelfamilyBackround.add(lblRequired9);
        lblRequired9.setBounds(230, 440, 20, 17);

        jPanel1.add(panelfamilyBackround);
        panelfamilyBackround.setBounds(350, 100, 410, 540);

        lblBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barangaysystem/image/BackButtonSmall.png"))); // NOI18N
        lblBack.setToolTipText("Back to Main Menu");
        lblBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblBackMouseEntered(evt);
            }
        });
        jPanel1.add(lblBack);
        lblBack.setBounds(20, 0, 50, 50);

        lblBackHover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barangaysystem/image/BackButtonHoverSmall.png"))); // NOI18N
        lblBackHover.setToolTipText("Back");
        lblBackHover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBackHoverMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblBackHoverMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblBackHoverMouseExited(evt);
            }
        });
        jPanel1.add(lblBackHover);
        lblBackHover.setBounds(20, 0, 60, 50);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setText("Date");
        jPanel1.add(lblDate);
        lblDate.setBounds(700, 30, 130, 20);

        lblTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setText("Time");
        jPanel1.add(lblTime);
        lblTime.setBounds(850, 30, 150, 20);

        cmdSelectImage.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        cmdSelectImage.setText("SELECT IMAGE");
        cmdSelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectImageActionPerformed(evt);
            }
        });
        jPanel1.add(cmdSelectImage);
        cmdSelectImage.setBounds(770, 420, 210, 40);

        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lblImage);
        lblImage.setBounds(770, 210, 210, 200);

        lblIndicatesRequiredField.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        lblIndicatesRequiredField.setText("* .Indicates a required field.");
        jPanel1.add(lblIndicatesRequiredField);
        lblIndicatesRequiredField.setBounds(240, 70, 200, 20);

        lblUserType.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUserType.setForeground(new java.awt.Color(255, 255, 255));
        lblUserType.setText("UserType");
        jPanel1.add(lblUserType);
        lblUserType.setBounds(440, 10, 70, 15);

        lblUserID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUserID.setForeground(new java.awt.Color(255, 255, 255));
        lblUserID.setText("UserID");
        jPanel1.add(lblUserID);
        lblUserID.setBounds(320, 10, 70, 15);

        lblUsername.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username");
        jPanel1.add(lblUsername);
        lblUsername.setBounds(370, 10, 70, 15);

        lblDefaultImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barangaysystem/image/ResidentsDefaultAvatar.jpg"))); // NOI18N
        lblDefaultImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lblDefaultImage);
        lblDefaultImage.setBounds(770, 210, 210, 200);

        lblFname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblFname.setForeground(new java.awt.Color(255, 255, 255));
        lblFname.setText("fname");
        jPanel1.add(lblFname);
        lblFname.setBounds(560, 30, 50, 20);

        lblLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblLname.setForeground(new java.awt.Color(255, 255, 255));
        lblLname.setText("lname");
        jPanel1.add(lblLname);
        lblLname.setBounds(610, 14, 50, 20);

        lblDobCheck.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDobCheck.setForeground(new java.awt.Color(255, 255, 255));
        lblDobCheck.setText("dob");
        jPanel1.add(lblDobCheck);
        lblDobCheck.setBounds(610, 30, 50, 20);

        lblID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblID.setForeground(new java.awt.Color(255, 255, 255));
        lblID.setText("ID");
        jPanel1.add(lblID);
        lblID.setBounds(570, 20, 20, 14);

        lblSelectedRowResidentID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSelectedRowResidentID.setForeground(new java.awt.Color(255, 255, 255));
        lblSelectedRowResidentID.setText("SelectedResidentID");
        lblSelectedRowResidentID.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblSelectedRowResidentIDPropertyChange(evt);
            }
        });
        jPanel1.add(lblSelectedRowResidentID);
        lblSelectedRowResidentID.setBounds(340, 30, 119, 20);

        lblDisplayResidentID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDisplayResidentID.setText("Resident ID");
        jPanel1.add(lblDisplayResidentID);
        lblDisplayResidentID.setBounds(30, 70, 140, 20);

        lblLoginAs1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblLoginAs1.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginAs1.setText("Login:");
        jPanel1.add(lblLoginAs1);
        lblLoginAs1.setBounds(700, 10, 50, 20);

        lblLoginAs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblLoginAs.setForeground(new java.awt.Color(255, 255, 255));
        lblLoginAs.setText("Name");
        jPanel1.add(lblLoginAs);
        lblLoginAs.setBounds(750, 10, 250, 20);

        jPanel2.setBackground(new java.awt.Color(0, 51, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Update Resident");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel1)
                .addContainerGap(699, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 1000, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/barangaysystem/image/bg1k.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(0, 0, 1000, 650);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackMouseEntered
        // TODO add your handling code here:
        lblBack.setVisible(false);
    }//GEN-LAST:event_lblBackMouseEntered

    private void lblBackHoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackHoverMouseClicked
        // TODO add your handling code here:
        String LoginAs = lblLoginAs.getText();
        String UserID = lblUserID.getText();
        String Username = lblUsername.getText();
        String userType = lblUserType.getText();
        Residents ob = new Residents();
        ob.lblLoginAs.setText(LoginAs);
        ob.lblUserID.setText(UserID);
        ob.lblUsername.setText(Username);
        ob.lblUserType.setText(userType);
        ob.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblBackHoverMouseClicked

    private void lblBackHoverMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackHoverMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblBackHoverMouseEntered

    private void lblBackHoverMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackHoverMouseExited
        // TODO add your handling code here:
        lblBack.setVisible(true);
    }//GEN-LAST:event_lblBackHoverMouseExited

    private void cboBirthRankItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboBirthRankItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboBirthRankItemStateChanged

    private void cmdSelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectImageActionPerformed
        // TODO add your handling code here:
JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.jpg","*.png","*.gif","*.bmp");
        fileChooser.addChoosableFileFilter(filter);
        int result=fileChooser.showSaveDialog(null);
        if(result==JFileChooser.APPROVE_OPTION){
        File selectedFile = fileChooser.getSelectedFile();
        String path = selectedFile.getAbsolutePath();
        lblImage.setIcon(ResizeImage(path));
        s = path;
        wImage = "Yes";
       // cmdUpdate.setVisible(true);
        //cmdUpdate.setVisible(false);
        }else if(result==JFileChooser.CANCEL_OPTION){
           // lblImage.setIcon(null);
           if(wImage.equals("")){
               wImage= "";
           }else{
            wImage = "No";
           }
          //  cmdUpdate.setVisible(true);
            //cmdUpdate.setVisible(false);
            JOptionPane.showMessageDialog(null, "Operation Cancelled","Barangay System",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdSelectImageActionPerformed

    private void cmdUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUpdateActionPerformed
        // TODO add your handling code here:
        if (txtRfname.getText().equals("") || txtRmname.getText().equals("") || txtRlname.getText().equals("") ||
        ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText().equals("") || txtPOB.getText().equals("") || cboGender.getSelectedItem().equals("") || 
        txtAddressBlock.getText().equals("") || txtAddressLot.getText().equals("") || txtNoOfSiblings.getText().equals("")){
        JOptionPane.showMessageDialog(null, "Please Specified the Required Fields  (  *  )","Barangay System",JOptionPane.ERROR_MESSAGE);
        }else{
            if(txtRfname.getText().equals(lblFname.getText()) & txtRlname.getText().equals(lblLname.getText()) & ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText().equals(lblDobCheck.getText())){
		int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure?", "Barangay System",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (selectedOption==JOptionPane.YES_OPTION){
  try{
String fname = txtRfname.getText();
String mname = txtRmname.getText();
String lname = txtRlname.getText();
String dob = ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText();
String pob = txtPOB.getText();
String gender = (String) cboGender.getSelectedItem();
String registeredvoter = "";
if (chkRegisteredVoter.isSelected()==true){
            registeredvoter = "Yes";
            }else{
            registeredvoter = "No";
            }
String addressBlock = txtAddressBlock.getText();
String addressLot = txtAddressLot.getText();
String fatherfname = txtFatherFname.getText();
String fatherlname = txtFatherLname.getText();
String fatheroccupation = txtFatherOccupation.getText();
String motherfname = txtMotherFname.getText();
String motherlname = txtMotherLname.getText();
String motheroccupation = txtMotherOccupation.getText();
String guardianfname = txtGuardianFname.getText();
String guardianlname = txtGuardianLname.getText();
String guardianrelationship = txtGuardianRelationship.getText();
String guardianoccupation = txtGuardianOccupation.getText();
String spousefname = txtSpouseFname.getText();
String spouselname = txtSpouseLname.getText();
String spouseoccupation = txtSpouseOccupation.getText();
String noOfSibblings = txtNoOfSiblings.getText();
String BirthRank = (String )cboBirthRank.getSelectedItem();
String updateResidentID = lblSelectedRowResidentID.getText();
String sql = "UPDATE `residents` SET `fname`='"+fname+"',`mname`='"+mname+"',`lname`='"+lname+"',"
        + "`dob`='"+dob+"',`pob`='"+pob+"',`gender`='"+gender+"',`registeredvoter`='"+registeredvoter+"',`addressBlock`='"+addressBlock+"',"
        + "`addressLot`='"+addressLot+"',`father-fname`='"+fatherfname+"',`father-lname`='"+fatherlname+"',"
        + "`father-occupation`='"+fatheroccupation+"',`mother-fname`='"+motherfname+"',`mother-lname`='"+motherlname+"',"
        + "`mother-occupation`='"+motheroccupation+"',`guardian-fname`='"+guardianfname+"',`guardian-lname`='"+guardianlname+"',"
        + "`guardian-relationship`='"+guardianrelationship+"',`guardian-occupation`='"+guardianoccupation+"',`spouse-fname`='"+spousefname+"',"
        + "`spouse-lname`='"+spouselname+"',`spouse-occupation`='"+spouseoccupation+"',`noOfSibblings`='"+noOfSibblings+"',"
        + "`BirthRank`='"+BirthRank+"' WHERE ResidentID='"+updateResidentID+"'";
        Connection conn=MySqlConnect.ConnectDB();
        pst=conn.prepareStatement(sql);
            pst.executeUpdate();
      if (wImage.equals("No")) {
          String sqlNoImage = "UPDATE `residents` SET image=? WHERE ResidentID='" + updateResidentID + "'";
          pst = conn.prepareStatement(sqlNoImage);
          pst.setString(1, "");
          pst.executeUpdate();
      } else if (wImage.equals("Yes")) {
          String sqlWithImage = "UPDATE `residents` SET image=? WHERE ResidentID='" + updateResidentID + "'";
          pst = conn.prepareStatement(sqlWithImage);
          InputStream is = new FileInputStream(new File(s));
          pst.setBlob(1, is);
          pst.executeUpdate();
      }
      lblFname.setText(txtRfname.getText());
      lblLname.setText(txtRlname.getText());
      lblDobCheck.setText(((JTextField)txtDOB.getDateEditor().getUiComponent()).getText());
      
      report();
      JOptionPane.showMessageDialog(null, "Successfully Updated","Barangay System",JOptionPane.INFORMATION_MESSAGE);
  }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
            //JOptionPane.showMessageDialog(null,"Can't Connect, Please Contact your Administrator","Barangay System",JOptionPane.ERROR_MESSAGE);
        }
        }
        }else{
        String fnameCheck = txtRfname.getText();
        String lnameCheck = txtRlname.getText();
        String dobCheck = ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText();
        String ResidentCheck = "SELECT ResidentID,fname,lname,dob FROM residents where fname='"+fnameCheck+"' And lname='"+lnameCheck+"' And dob='"+dobCheck+"'";
        Connection conn=MySqlConnect.ConnectDB();
          try{
            pst=conn.prepareStatement(ResidentCheck);
           rs=pst.executeQuery();
           while(rs.next()){
           lblID.setText(rs.getString(1));
           lblFname.setText(rs.getString(2));
           lblLname.setText(rs.getString(3));
           lblDobCheck.setText(rs.getString(4));
           }
           if(txtRfname.getText().equals(lblFname.getText()) & txtRlname.getText().equals(lblLname.getText()) & ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText().equals(lblDobCheck.getText())){
              
           String alreadyID = lblID.getText();
           JOptionPane.showMessageDialog(null,"Resident Same Record Found. \n Existing Resident ID: " + alreadyID + "" ,"Barangay System",JOptionPane.ERROR_MESSAGE);
           } else{
		int selectedOption = JOptionPane.showConfirmDialog(null, "Are you sure?", "Barangay System",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if (selectedOption==JOptionPane.YES_OPTION){
  try{
String fname = txtRfname.getText();
String mname = txtRmname.getText();
String lname = txtRlname.getText();
String dob = ((JTextField)txtDOB.getDateEditor().getUiComponent()).getText();
String pob = txtPOB.getText();
String gender = (String) cboGender.getSelectedItem();
String registeredvoter = "";
if (chkRegisteredVoter.isSelected()==true){
            registeredvoter = "Yes";
            }else{
            registeredvoter = "No";
            }
String addressBlock = txtAddressBlock.getText();
String addressLot = txtAddressLot.getText();
String fatherfname = txtFatherFname.getText();
String fatherlname = txtFatherLname.getText();
String fatheroccupation = txtFatherOccupation.getText();
String motherfname = txtMotherFname.getText();
String motherlname = txtMotherLname.getText();
String motheroccupation = txtMotherOccupation.getText();
String guardianfname = txtGuardianFname.getText();
String guardianlname = txtGuardianLname.getText();
String guardianrelationship = txtGuardianRelationship.getText();
String guardianoccupation = txtGuardianOccupation.getText();
String spousefname = txtSpouseFname.getText();
String spouselname = txtSpouseLname.getText();
String spouseoccupation = txtSpouseOccupation.getText();
String noOfSibblings = txtNoOfSiblings.getText();
String BirthRank = (String )cboBirthRank.getSelectedItem();
String updateResidentID = lblSelectedRowResidentID.getText();
String sql = "UPDATE `residents` SET `fname`='"+fname+"',`mname`='"+mname+"',`lname`='"+lname+"',"
        + "`dob`='"+dob+"',`pob`='"+pob+"',`gender`='"+gender+"',`registeredvoter`='"+registeredvoter+"',`addressBlock`='"+addressBlock+"',"
        + "`addressLot`='"+addressLot+"',`father-fname`='"+fatherfname+"',`father-lname`='"+fatherlname+"',"
        + "`father-occupation`='"+fatheroccupation+"',`mother-fname`='"+motherfname+"',`mother-lname`='"+motherlname+"',"
        + "`mother-occupation`='"+motheroccupation+"',`guardian-fname`='"+guardianfname+"',`guardian-lname`='"+guardianlname+"',"
        + "`guardian-relationship`='"+guardianrelationship+"',`guardian-occupation`='"+guardianoccupation+"',`spouse-fname`='"+spousefname+"',"
        + "`spouse-lname`='"+spouselname+"',`spouse-occupation`='"+spouseoccupation+"',`noOfSibblings`='"+noOfSibblings+"',"
        + "`BirthRank`='"+BirthRank+"' WHERE ResidentID='"+updateResidentID+"'";
 pst=conn.prepareStatement(sql);
            pst.executeUpdate();
      if (wImage.equals("No")) {
          String sqlNoImage = "UPDATE `residents` SET image=? WHERE ResidentID='" + updateResidentID + "'";
          pst = conn.prepareStatement(sqlNoImage);
          pst.setString(1, "");
          pst.executeUpdate();
      } else if (wImage.equals("Yes")) {
          String sqlWithImage = "UPDATE `residents` SET image=? WHERE ResidentID='" + updateResidentID + "'";
          pst = conn.prepareStatement(sqlWithImage);
          InputStream is = new FileInputStream(new File(s));
          pst.setBlob(1, is);
          pst.executeUpdate();
      }
      lblFname.setText(txtRfname.getText());
      lblLname.setText(txtRlname.getText());
      lblDobCheck.setText(((JTextField)txtDOB.getDateEditor().getUiComponent()).getText());
      report();
            JOptionPane.showMessageDialog(null, "Successfully Updated","Barangay System",JOptionPane.INFORMATION_MESSAGE);
  }catch(Exception e){
           JOptionPane.showMessageDialog(null, e);
            //JOptionPane.showMessageDialog(null,"Can't Connect, Please Contact your Administrator","Barangay System",JOptionPane.ERROR_MESSAGE);
        }
        }
           }
          }catch(Exception e){
           // e.printStackTrace();
          // JOptionPane.showMessageDialog(null, e);
            JOptionPane.showMessageDialog(null,"Can't Connect, Please Contact your Administrator","Barangay System",JOptionPane.ERROR_MESSAGE);
        }
            }
        }
    }//GEN-LAST:event_cmdUpdateActionPerformed

    private void lblSelectedRowResidentIDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblSelectedRowResidentIDPropertyChange
        // TODO add your handling code here:
        String sql = "SELECT * FROM `residents` WHERE ResidentID=? ";
        Connection conn=MySqlConnect.ConnectDB();
        try {
            pst = conn.prepareStatement(sql);
            pst.setString(1, lblSelectedRowResidentID.getText());
            rs = pst.executeQuery();
            while (rs.next()) {
                String ResidentID = rs.getString("ResidentID");
                lblDisplayResidentID.setText("Resident ID: " + ResidentID);
                String fname = rs.getString("fname");
                txtRfname.setText(fname);
                lblFname.setText(fname);
                String mname = rs.getString("mname");
                txtRmname.setText(mname);
                String lname = rs.getString("lname");
                txtRlname.setText(lname);
                lblLname.setText(lname);
                Date dob = rs.getDate("dob");
                txtDOB.setDate(dob);
                lblDobCheck.setText(String.valueOf(dob));
                String pob = rs.getString("pob");
                txtPOB.setText(pob);
                String gender = rs.getString("gender");
                cboGender.setSelectedItem(gender);
                String registeredVoter = rs.getString("registeredvoter");
                if (registeredVoter.equals("Yes")){
                chkRegisteredVoter.setSelected(true);
                }else{
                chkRegisteredVoter.setSelected(false);
                }
                String addressBlock = rs.getString("addressBlock");
                txtAddressBlock.setText(addressBlock);
                String addressLot = rs.getString("addressLot");
                txtAddressLot.setText(addressLot);
                String fatherfname = rs.getString("father-fname");
                txtFatherFname.setText(fatherfname);
                String fatherlname = rs.getString("father-lname");
                txtFatherLname.setText(fatherlname);
                String fatheroccupation = rs.getString("father-occupation");
                txtFatherOccupation.setText(fatheroccupation);
                String motherfname = rs.getString("mother-fname");
                txtMotherFname.setText(motherfname);
                String motherlname = rs.getString("mother-lname");
                txtMotherLname.setText(motherlname);
                String motheroccupation = rs.getString("mother-occupation");
                txtMotherOccupation.setText(motheroccupation);
                String guardianfname = rs.getString("guardian-fname");
                txtGuardianFname.setText(guardianfname);
                String guardianlname = rs.getString("guardian-lname");
                txtGuardianLname.setText(guardianlname);
                String guardianrelationship = rs.getString("guardian-relationship");
                txtGuardianRelationship.setText(guardianrelationship);
                String guardianoccupation = rs.getString("guardian-occupation");
                txtGuardianOccupation.setText(guardianoccupation);
                String spousefname = rs.getString("spouse-fname");
                txtSpouseFname.setText(spousefname);
                String spouselname = rs.getString("spouse-lname");
                txtSpouseLname.setText(spouselname);
                String spouseoccupation = rs.getString("spouse-occupation");
                txtSpouseOccupation.setText(spouseoccupation);
                String noOfSibblings = rs.getString("noOfSibblings");
                txtNoOfSiblings.setText(noOfSibblings);
                String BirthRank = rs.getString("BirthRank");
                cboBirthRank.setSelectedItem(BirthRank);
                byte[] img = rs.getBytes("image");
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH));
                lblImage.setIcon(imageIcon);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_lblSelectedRowResidentIDPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateResident().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboBirthRank;
    private javax.swing.JComboBox<String> cboGender;
    private javax.swing.JCheckBox chkRegisteredVoter;
    private javax.swing.JButton cmdSelectImage;
    private javax.swing.JButton cmdUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblAddressBlock;
    private javax.swing.JLabel lblAddressLot;
    private javax.swing.JLabel lblBack;
    private javax.swing.JLabel lblBackHover;
    private javax.swing.JLabel lblBirthRank;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDOBpattern;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDefaultImage;
    public static javax.swing.JLabel lblDisplayResidentID;
    private javax.swing.JLabel lblDobCheck;
    private javax.swing.JLabel lblFatherName;
    private javax.swing.JLabel lblFatherOccupation;
    private javax.swing.JLabel lblFname;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGuardian;
    private javax.swing.JLabel lblGuardianOccupation;
    private javax.swing.JLabel lblGuardianRelationShip;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblIndicatesRequiredField;
    private javax.swing.JLabel lblLname;
    public static javax.swing.JLabel lblLoginAs;
    public static javax.swing.JLabel lblLoginAs1;
    private javax.swing.JLabel lblMotherName;
    private javax.swing.JLabel lblMotherOccupation;
    private javax.swing.JLabel lblNoOfSiblings;
    private javax.swing.JLabel lblPOB;
    private javax.swing.JLabel lblRequired;
    private javax.swing.JLabel lblRequired1;
    private javax.swing.JLabel lblRequired2;
    private javax.swing.JLabel lblRequired3;
    private javax.swing.JLabel lblRequired4;
    private javax.swing.JLabel lblRequired5;
    private javax.swing.JLabel lblRequired6;
    private javax.swing.JLabel lblRequired7;
    private javax.swing.JLabel lblRequired8;
    private javax.swing.JLabel lblRequired9;
    private javax.swing.JLabel lblRfname;
    private javax.swing.JLabel lblRlname;
    private javax.swing.JLabel lblRmname;
    public static javax.swing.JLabel lblSelectedRowResidentID;
    private javax.swing.JLabel lblSpouse;
    private javax.swing.JLabel lblSpouseOccupation;
    private javax.swing.JLabel lblTime;
    public static javax.swing.JLabel lblUserID;
    public static javax.swing.JLabel lblUserType;
    public static javax.swing.JLabel lblUsername;
    private javax.swing.JPanel panelAddress;
    private javax.swing.JPanel panelFather;
    private javax.swing.JPanel panelMother;
    private javax.swing.JPanel panelPersonalInfo;
    private javax.swing.JPanel panelfamilyBackround;
    private javax.swing.JTextField txtAddressBlock;
    private javax.swing.JTextField txtAddressLot;
    private com.toedter.calendar.JDateChooser txtDOB;
    private javax.swing.JTextField txtFatherFname;
    private javax.swing.JTextField txtFatherLname;
    private javax.swing.JTextField txtFatherOccupation;
    private javax.swing.JTextField txtGuardianFname;
    private javax.swing.JTextField txtGuardianLname;
    private javax.swing.JTextField txtGuardianOccupation;
    private javax.swing.JTextField txtGuardianRelationship;
    private javax.swing.JTextField txtMotherFname;
    private javax.swing.JTextField txtMotherLname;
    private javax.swing.JTextField txtMotherOccupation;
    private javax.swing.JTextField txtNoOfSiblings;
    private javax.swing.JTextField txtPOB;
    private javax.swing.JTextField txtRfname;
    private javax.swing.JTextField txtRlname;
    private javax.swing.JTextField txtRmname;
    private javax.swing.JTextField txtSpouseFname;
    private javax.swing.JTextField txtSpouseLname;
    private javax.swing.JTextField txtSpouseOccupation;
    // End of variables declaration//GEN-END:variables
        public ImageIcon ResizeImage(String imgPath){
        ImageIcon MyImage = new ImageIcon(imgPath);
        Image img = MyImage.getImage();
        Image newImage = img.getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImage);
        return image;
        }
}
